---
description: ドキュメント仕様書
globs: *.md
---
## 共通仕様
- マークダウンで記載するときはヘディングやリストを使い、構造化を明確に利用する。
- 仕様書については業務フロー図、をはじめとしたUMLなどの可能な限り図を入れることとし、Mermaid.jsの記法で記述する。
- など、とか、といった冗長な表現は避け、断定的な書き方をする。
- ドキュメント間のトレーサビリティを確保するため、機能番号と章番号を統一する。
- 各機能を個別の見出しとして定義し、機能概略テーブルにリンクを設定する。
- 複数の関連する設計項目がある場合は、詳細設計へのリンク欄にカンマ区切りで複数のリンクを記載する成

### 01-要件概要.md
要件の概要が記述される。システムが対象とする企業、組織の概要、問題点を完結に列挙する。

### 02-要件定義.md
[01-要件概要.md](mdc:docs/01-要件概要.md) の内容に矛盾せず要件定義がなされている。要件定義では機能要件が列挙される。このファイルではあくまで要件の定義のみを行い、詳細な設計については [03-詳細設計.md](mdc:-詳細設計.md) で行われるため言及しない。非機能要件については曖昧な表記を許すが、詳細な数値目標まで踏み込まない。

#### 機能概略テーブル
要件定義には「機能概件、詳細設計、テストのトレーサビリティを確保するためのテーブルを記載する。

テーブル形式：
```markdown
| 機能番号 | 機能名 | 機能要件 | 詳細設計 | テスト |
|---------|-----------------|-------------------|----------------|
| F001 | 機能名1 | [2.1 機能名1](mdc:#21-機能名1) | [2.1 機能名1](mdc:03-詳細設計.md#21-機能名1) | [2.1 機能名1のテスト](mdc:06-E2Eテスト.md#21-機能名1のテスト) |
| F002 | 機能名2 | [2.2 機能名2 [2.2 機能名2](mdc:03-詳細設計.md#22-機能名2), [3.1 UI関連](mdc:03-詳細設計.md#31-ui関連) | [2.2 機能名2のテスト](mdc:06-E2Eテスト.md#22-機能名2のテスト) |
```

#### 番号付けルール
- 機能番号はF001からF999までの連番とする。
- 要件定義の機能要件の章番号は2.1, 2.2...と、機能番号F001, F002...に対応させる。
- 詳細設計の機能詳細設計の章番号も2.1, 2.2...と、機能番号に対応させる。
- E2Eテストの項号を使リンクの貼内へのリンク: `[2.1 機能名](mdc:#21-機能名)`
- 別ドキュメントへのリンク: `[2.1 機能名](mdc:03-詳細設計.md#21-機能名)`
- 機能に複数の詳細設計項目が関連する場合はカンマで###
[02-要件定義.md](mdc:docs/02-要件定義.md) の内容に矛盾せず詳細設計が記載されている。機能の具体的な設計に始まり、構成図、権限設計、各種業務フロー、状態遷移などの図がMermaid記法で書かれている。たとえば項目の定義など、必要なものの仕様を定める。DB設.md](mdc:docs/05-DB設計.md)で行うため、DBに関する情報、テーブル設計などは決して言及しない。

#### 番号付けと構成
- 章構成は要件定義の機能番号に合わせる。
- 機能詳細設計の章番号は2.1, 2.2...と、要件定義の機能番号F001, F002...に対応させる。
- 各機能詳細設計は必要に応じてサブセクションに分ける（例：2.1.1, 2.1.2, 2.1.3）。
- 機能詳細以外の設計（UI設計、セキュリティ設計など）は3章以降に記載する。

#### 詳細設計の記述
- 各機能の具体的な実装方法、アルゴリズム、ロジックを明確に記述する。
- フロー図、シーケンス図などを活用して視覚的な理解を促進する。
- コード例を示す場合は、言語に応じたコードブロックを使用する。
- 非機能要件については決して言及しない。

#### 使用技術
使用技術は下記のもので固定とする。
- フロント: React
- Backend: TypeScript
- インフラ: Supabase
- DB: Postgres
- 認証: Supabase
- E2E Testing: Cypress

### 04-サイトマップ.md
[04-サイトマップ.md](mdc:docs/04-サイトマップ.md) にシステムで利用されるURLのパスについてのリストをサイトマップとして作成する。

サイトマップはツリー構造の図ではなく、テーブル構造のリストとして作成する。
テーブルは `パス`, `名称`, `基本機能`, `特記事項` の項目で構成される。
`基本機能` には基本的な機能、具体的には「予約の作成」といった機能を記載する。パスから推測される程度の内容で良い。 `特記事項` ではパスからは推測されづらい機能を記載する。この内容は詳細設計などを元に、そのページに対して配置すべき機能を記載する。

### 05-DB設計.md
[02-要件定義.md](mdc:docs/02-要件定義.md) , [03-詳細設計.md](mdc:docs/03-詳細設計.md) を元に [05-DB設計.md](mdc:docs/05-DB設計.md) にデータベース設計を記載する。PostgreSQLで設計される。他の仕様書をもとにER図とテーブルの設計を記載する。
ロールベースを下にしたRLSの権限設定を記述する。

### 06-E2Eテスト.md
[02-要件定義.md](mdc:docs/02-要件定義.md) と [03-詳細設計.md](mdc:docs/03-詳細設計.md) を元にE2Eテスト設計を記述する。

#### 番号付けと構成
- E2Eテストの章番号は要件定義・詳細設計の機能番号に対応させる。
- 要件定義の機能番号F001に対応するテストは2.1章に記載する。
- サブセクションとしてテストケースを記載する（2.1.1, 2.1.2...）。

#### テスト記述のルール
- テスト設計にはテストコードは一切書かず、何をテストするかの項目と、テストで期待される結果のみを書く。
- 各種タイムアウトの設定は10秒とする。
- テストを作成する場合には、要件定義を満たすような内容になっているかを確認する。
- ログインなどの共通化できる部分については処理を共通化する。

#### テスト項目の記述形式
```markdown
### 2.1 機能名1のテスト
1. テストケース1
   - 期待結果: 期待される動作を明確に記述
   - 期待結果: 複数の確認項目がある場合は列挙

2. テストケース2
   - 期待結果: 期待される動作を明確に記述
```